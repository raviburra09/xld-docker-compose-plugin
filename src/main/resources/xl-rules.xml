<?xml version="1.0"?>
<!--

    THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
    FOR A PARTICULAR PURPOSE. THIS CODE AND INFORMATION ARE NOT SUPPORTED BY XEBIALABS.

-->

<rules xmlns="http://www.xebialabs.com/xl-deploy/xl-rules">

    <rule name="docker.compose.up" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
        </conditions>
        <steps>
            <jython>
                <description expression="true">"Pull the images defined in '%s' on '%s' " %
                    (deployed.name,deployed.container.name)
                </description>
                <order>5</order>
                <script>docker_compose/pull.py</script>
                <jython-context>
                    <composed expression="true">deployed</composed>
                    <application expression="true">deployedApplication.name</application>
                </jython-context>
            </jython>
            <jython>
                <description expression="true">"Create and start containers defined in '%s' on '%s' " %
                    (deployed.name,deployed.container.name)
                </description>
                <order>70</order>
                <script>docker_compose/up.py</script>
                <jython-context>
                    <composed expression="true">deployed</composed>
                    <application expression="true">deployedApplication.name</application>
                </jython-context>
            </jython>
            <jython>
                <description expression="true">"List containers defined in '%s' on '%s' " %
                    (deployed.name,deployed.container.name)
                </description>
                <order>80</order>
                <script>docker_compose/ps.py</script>
                <jython-context>
                    <composed expression="true">deployed</composed>
                    <application expression="true">deployedApplication.name</application>
                </jython-context>
            </jython>
        </steps>
    </rule>

    <rule name="docker.compose.up.on.noop" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>NOOP</operation>
            <expression>deployed.executeOnNoop</expression>
        </conditions>
        <steps>
            <jython>
                <description expression="true">"pull the images defined in '%s' on '%s' " %
                    (deployed.name,deployed.container.name)
                </description>
                <order>65</order>
                <script>docker_compose/pull.py</script>
                <jython-context>
                    <composed expression="true">deployed</composed>
                    <application expression="true">deployedApplication.name</application>
                </jython-context>
            </jython>
            <jython>
                <description expression="true">"Create and start containers defined in '%s' on '%s' " %
                    (deployed.name,deployed.container.name)
                </description>
                <order>70</order>
                <script>docker_compose/up.py</script>
                <jython-context>
                    <composed expression="true">deployed</composed>
                    <application expression="true">deployedApplication.name</application>
                </jython-context>
            </jython>
            <jython>
                <description expression="true">"List containers defined in '%s' on '%s' " %
                    (deployed.name,deployed.container.name)
                </description>
                <order>80</order>
                <script>docker_compose/ps.py</script>
                <jython-context>
                    <composed expression="true">deployed</composed>
                    <application expression="true">deployedApplication.name</application>
                </jython-context>
            </jython>
        </steps>
    </rule>


    <rule name="docker.compose.stop" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>MODIFY</operation>
            <operation>DESTROY</operation>
        </conditions>
        <steps>
            <jython>
                <description expression="true">"Stop the services defined in '%s' file on '%s'" %
                    (previousDeployed.name,
                    previousDeployed.container.name)
                </description>
                <order>20</order>
                <script>docker_compose/stop.py</script>
                <jython-context>
                    <composed expression="true">previousDeployed</composed>
                    <application expression="true">previousDeployedApplication.name</application>
                </jython-context>
            </jython>
        </steps>
    </rule>

    <rule name="docker.compose.remove" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>MODIFY</operation>
            <operation>DESTROY</operation>
        </conditions>
        <steps>
            <jython>
                <description expression="true">"Remove stopped containers defined in '%s' file on '%s'" %
                    (previousDeployed.name, previousDeployed.container.name)
                </description>
                <order>25</order>
                <script>docker_compose/rm.py</script>
                <jython-context>
                    <composed expression="true">previousDeployed</composed>
                    <application expression="true">previousDeployedApplication.name</application>
                </jython-context>
            </jython>
        </steps>
    </rule>


    <rule name="docker.compose.logs" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
            <expression>deployed.dumpLogsAfterStartup</expression>
        </conditions>
        <steps>
            <wait>
                <order>82</order>
                <description expression="true">"Waiting for 20 seconds"</description>
                <seconds>20</seconds>
            </wait>
            <jython>
                <description expression="true">"View output from containers '%s'" % (deployed.name)</description>
                <order>82</order>
                <script>docker_compose/logs.py</script>
                <jython-context>
                    <composed expression="true">deployed</composed>
                    <application expression="true">deployedApplication.name</application>
                </jython-context>
            </jython>
        </steps>
    </rule>

    <rule name="docker.compose.logs.on.noop" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>NOOP</operation>
            <expression>deployed.dumpLogsAfterStartup and deployed.executeOnNoop</expression>
        </conditions>
        <steps>
            <wait>
                <order>82</order>
                <description expression="true">"Waiting for 20 seconds"</description>
                <seconds>20</seconds>
            </wait>
            <jython>
                <description expression="true">"View output from containers '%s'" % (deployed.name)</description>
                <order>82</order>
                <script>docker_compose/logs.py</script>
                <jython-context>
                    <composed expression="true">deployed</composed>
                    <application expression="true">deployedApplication.name</application>
                </jython-context>
            </jython>
        </steps>
    </rule>

</rules>
