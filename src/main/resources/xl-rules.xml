<?xml version="1.0"?>
<!--

    THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
    FOR A PARTICULAR PURPOSE. THIS CODE AND INFORMATION ARE NOT SUPPORTED BY XEBIALABS.

-->

<rules xmlns="http://www.xebialabs.com/xl-deploy/xl-rules">

    <!-- Docker Compose -->
    <rule name="docker.compose.up" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Execute docker-compose up '%s' on '%s' " %
                    (deployed.name,deployed.container.name)
                </description>
                <order>65</order>
                <script>docker-compose/up</script>
                <freemarker-context>
                    <composed expression="true">deployed</composed>
                    <target expression="true">deployed.container</target>
                    <application expression="true">deployedApplication.name</application>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>

    <rule name="docker.compose.stop" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>MODIFY</operation>
            <operation>DESTROY</operation>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Execute docker-compose stop '%s' file on '%s'" % (previousDeployed.name,
                    previousDeployed.container.name)
                </description>
                <order>35</order>
                <script>docker-compose/stop</script>
                <freemarker-context>
                    <composed expression="true">previousDeployed</composed>
                    <target expression="true">previousDeployed.container</target>
                    <application expression="true">previousDeployedApplication.name</application>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>

    <rule name="docker.compose.remove" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>MODIFY</operation>
            <operation>DESTROY</operation>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Execute docker-compose remove '%s' file on '%s'" %
                    (previousDeployed.name, previousDeployed.container.name)
                </description>
                <order>36</order>
                <script>docker-compose/rm</script>
                <freemarker-context>
                    <composed expression="true">previousDeployed</composed>
                    <target expression="true">previousDeployed.container</target>
                    <application expression="true">previousDeployedApplication.name</application>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>


    <rule name="docker.compose.logs" scope="deployed">
        <conditions>
            <type>docker.ComposedContainers</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
            <expression>deployed.dumpLogsAfterStartup</expression>
        </conditions>
        <steps>
            <wait>
                <order>82</order>
                <description expression="true">"Waiting for 20 seconds"</description>
                <seconds>20</seconds>
            </wait>
            <os-script>
                <description expression="true">"Dump the logs of composed containers '%s'" % (deployed.name)
                </description>
                <order>82</order>
                <script>docker-compose/logs</script>
                <freemarker-context>
                    <target expression="true">deployed.container</target>
                    <application expression="true">deployedApplication.name</application>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>
    <!-- / Docker Compose -->


</rules>
